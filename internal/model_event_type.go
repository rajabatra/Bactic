/*
 * Bactic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package internal

import (
	"fmt"
)

type EventType string

// List of EventType
const (
	T60M         EventType = "60m"
	T100M        EventType = "100m"
	T200M        EventType = "200m"
	T400M        EventType = "400m"
	T800M        EventType = "800m"
	T1500M       EventType = "1500m"
	T1MI         EventType = "1mi"
	T3000M       EventType = "3000m"
	T3000MS      EventType = "3000ms"
	T2MI         EventType = "2mi"
	T5000M       EventType = "5000m"
	T10000M      EventType = "10000m"
	T4X100M      EventType = "4x100m"
	T4X400M      EventType = "4x400m"
	HIGH_JUMP    EventType = "high_jump"
	VAULT        EventType = "vault"
	LONG_JUMP    EventType = "long_jump"
	TRIPLE_JUMP  EventType = "triple_jump"
	SHOT         EventType = "shot"
	WEIGHT_THROW EventType = "weight_throw"
	DISCUS       EventType = "discus"
	HAMMER       EventType = "hammer"
	JAV          EventType = "jav"
	DEC          EventType = "dec"
	HEPT         EventType = "hept"
	T100MH       EventType = "100mh"
	T110MH       EventType = "110mh"
	T400MH       EventType = "400mh"
	XC6K         EventType = "xc6k"
	XC8K         EventType = "xc8k"
	XC10K        EventType = "xc10k"
)

// AllowedEventTypeEnumValues is all the allowed values of EventType enum
var AllowedEventTypeEnumValues = []EventType{
	"60m",
	"100m",
	"200m",
	"400m",
	"800m",
	"1500m",
	"1mi",
	"3000m",
	"3000ms",
	"2mi",
	"5000m",
	"10000m",
	"4x100m",
	"4x400m",
	"high_jump",
	"vault",
	"long_jump",
	"triple_jump",
	"shot",
	"weight_throw",
	"discus",
	"hammer",
	"jav",
	"dec",
	"hept",
	"100mh",
	"110mh",
	"400mh",
	"xc6k",
	"xc8k",
	"xc10k",
}

// validEventTypeEnumValue provides a map of EventTypes for fast verification of use input
var validEventTypeEnumValues = map[EventType]struct{}{
	"60m":          {},
	"100m":         {},
	"200m":         {},
	"400m":         {},
	"800m":         {},
	"1500m":        {},
	"1mi":          {},
	"3000m":        {},
	"3000ms":       {},
	"2mi":          {},
	"5000m":        {},
	"10000m":       {},
	"4x100m":       {},
	"4x400m":       {},
	"high_jump":    {},
	"vault":        {},
	"long_jump":    {},
	"triple_jump":  {},
	"shot":         {},
	"weight_throw": {},
	"discus":       {},
	"hammer":       {},
	"jav":          {},
	"dec":          {},
	"hept":         {},
	"100mh":        {},
	"110mh":        {},
	"400mh":        {},
	"xc6k":         {},
	"xc8k":         {},
	"xc10k":        {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventType) IsValid() bool {
	_, ok := validEventTypeEnumValues[v]
	return ok
}

// NewEventTypeFromValue returns a pointer to a valid EventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventTypeFromValue(v string) (EventType, error) {
	ev := EventType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for EventType: valid values are %v", v, AllowedEventTypeEnumValues)
	}
}

// AssertEventTypeRequired checks if the required fields are not zero-ed
func AssertEventTypeRequired(obj EventType) error {
	return nil
}

// AssertEventTypeConstraints checks if the values respects the defined constraints
func AssertEventTypeConstraints(obj EventType) error {
	return nil
}
