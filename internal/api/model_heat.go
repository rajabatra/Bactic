/*
 * Bactic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api




type Heat struct {

	Id int64 `json:"id"`

	Type *interface{} `json:"type"`

	MeetId float32 `json:"meet_id"`
}

// AssertHeatRequired checks if the required fields are not zero-ed
func AssertHeatRequired(obj Heat) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"type": obj.Type,
		"meet_id": obj.MeetId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertHeatConstraints checks if the values respects the defined constraints
func AssertHeatConstraints(obj Heat) error {
	return nil
}
