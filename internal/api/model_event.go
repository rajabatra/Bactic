/*
 * Bactic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api


import (
	"fmt"
)



type Event string

// List of Event
const (
	_100M Event = "100m"
	_200M Event = "200m"
	_1500M Event = "1500m"
	_5000M Event = "5000m"
)

// AllowedEventEnumValues is all the allowed values of Event enum
var AllowedEventEnumValues = []Event{
	"100m",
	"200m",
	"1500m",
	"5000m",
}

// validEventEnumValue provides a map of Events for fast verification of use input
var validEventEnumValues = map[Event]struct{}{
	"100m": {},
	"200m": {},
	"1500m": {},
	"5000m": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Event) IsValid() bool {
	_, ok := validEventEnumValues[v]
	return ok
}

// NewEventFromValue returns a pointer to a valid Event
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventFromValue(v string) (Event, error) {
	ev := Event(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for Event: valid values are %v", v, AllowedEventEnumValues)
	}
}



// AssertEventRequired checks if the required fields are not zero-ed
func AssertEventRequired(obj Event) error {
	return nil
}

// AssertEventConstraints checks if the values respects the defined constraints
func AssertEventConstraints(obj Event) error {
	return nil
}
