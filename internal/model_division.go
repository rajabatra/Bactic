/*
 * Bactic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package internal

import (
	"fmt"
)

type Division string

// List of EventType
const (
	DI   Division = "di"
	DII  Division = "dii"
	DIII Division = "diii"
	NAIA Division = "naia"
)

// AllowedEventTypeEnumValues is all the allowed values of EventType enum
var AllowedDivisionEnumValues = []Division{
	"di",
	"dii",
	"diii",
	"naia",
}

// validEventTypeEnumValue provides a map of EventTypes for fast verification of use input
var validDivisionEnumValues = map[Division]struct{}{
	"di":   {},
	"dii":  {},
	"diii": {},
	"naia": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Division) IsValid() bool {
	_, ok := validDivisionEnumValues[v]
	return ok
}

// NewEventTypeFromValue returns a pointer to a valid EventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDivisionFromValue(v string) (EventType, error) {
	ev := EventType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for Division: valid values are %v", v, AllowedEventTypeEnumValues)
	}
}

// AssertEventTypeRequired checks if the required fields are not zero-ed
func AssertDivisionRequired(obj EventType) error {
	return nil
}

// AssertEventTypeConstraints checks if the values respects the defined constraints
func AssertDivisionConstraints(obj EventType) error {
	return nil
}
