/* tslint:disable */
/* eslint-disable */
/**
 * Bactic
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AthleteSummary,
  Event,
  SearchItem,
  StatsTimeseriesGet200Response,
  TeamSummary,
} from '../models/index';
import {
    AthleteSummaryFromJSON,
    AthleteSummaryToJSON,
    EventFromJSON,
    EventToJSON,
    SearchItemFromJSON,
    SearchItemToJSON,
    StatsTimeseriesGet200ResponseFromJSON,
    StatsTimeseriesGet200ResponseToJSON,
    TeamSummaryFromJSON,
    TeamSummaryToJSON,
} from '../models/index';

export interface SearchAthleteGetRequest {
    name: string;
}

export interface StatsAthleteIdGetRequest {
    id: number;
}

export interface StatsHistGetRequest {
    events?: Array<Event>;
    buckets?: number;
}

export interface StatsTeamIdGetRequest {
    id: number;
}

export interface StatsTimeseriesGetRequest {
    start: string;
    end: string;
    event?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Search for athlete name
     */
    async searchAthleteGetRaw(requestParameters: SearchAthleteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SearchItem>>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling searchAthleteGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/athlete`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SearchItemFromJSON));
    }

    /**
     * Search for athlete name
     */
    async searchAthleteGet(requestParameters: SearchAthleteGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SearchItem>> {
        const response = await this.searchAthleteGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get athlete summary
     */
    async statsAthleteIdGetRaw(requestParameters: StatsAthleteIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AthleteSummary>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling statsAthleteIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stats/athlete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AthleteSummaryFromJSON(jsonValue));
    }

    /**
     * Get athlete summary
     */
    async statsAthleteIdGet(requestParameters: StatsAthleteIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AthleteSummary> {
        const response = await this.statsAthleteIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get histogram
     */
    async statsHistGetRaw(requestParameters: StatsHistGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        if (requestParameters.events) {
            queryParameters['events'] = requestParameters.events;
        }

        if (requestParameters.buckets !== undefined) {
            queryParameters['buckets'] = requestParameters.buckets;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stats/hist`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get histogram
     */
    async statsHistGet(requestParameters: StatsHistGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.statsHistGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get team summary
     */
    async statsTeamIdGetRaw(requestParameters: StatsTeamIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamSummary>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling statsTeamIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stats/team/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamSummaryFromJSON(jsonValue));
    }

    /**
     * Get team summary
     */
    async statsTeamIdGet(requestParameters: StatsTeamIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamSummary> {
        const response = await this.statsTeamIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a time series
     */
    async statsTimeseriesGetRaw(requestParameters: StatsTimeseriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatsTimeseriesGet200Response>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling statsTimeseriesGet.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling statsTimeseriesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.event !== undefined) {
            queryParameters['event'] = requestParameters.event;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stats/timeseries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatsTimeseriesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a time series
     */
    async statsTimeseriesGet(requestParameters: StatsTimeseriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatsTimeseriesGet200Response> {
        const response = await this.statsTimeseriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
